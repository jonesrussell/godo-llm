---
globs: frontend/*.html,frontend/*.js,frontend/*.vue
description: Frontend development guidelines for Vue.js web interface
---

# Frontend Development Guidelines

## Vue.js Application Structure

### Component Organization
The frontend is a single-page Vue.js application in [frontend/index.html](mdc:frontend/index.html):

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Inference Interface</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <style>
        /* Application styles */
    </style>
</head>
<body>
    <div id="app">
        <!-- Vue.js application -->
    </div>
    <script>
        // Vue.js application code
    </script>
</body>
</html>
```

### Vue.js Best Practices
Follow Vue.js 3 Composition API patterns:

```javascript
const { createApp, ref, reactive, onMounted } = Vue;

const app = createApp({
    setup() {
        // Reactive state
        const prompt = ref('');
        const response = ref('');
        const isStreaming = ref(false);
        const error = ref(null);
        
        // Methods
        const generateText = async () => {
            // API call logic
        };
        
        return {
            prompt,
            response,
            isStreaming,
            error,
            generateText
        };
    }
});
```

## API Integration

### Fetch API Usage
Use modern fetch API for HTTP requests:

```javascript
const generateText = async () => {
    try {
        isStreaming.value = true;
        error.value = null;
        
        const response = await fetch('/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                prompt: prompt.value,
                max_tokens: 256,
                temperature: 0.7,
                stream: true
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        // Handle streaming response
        await handleStreamingResponse(response);
        
    } catch (err) {
        error.value = err.message;
    } finally {
        isStreaming.value = false;
    }
};
```

### Server-Sent Events (SSE)
Handle streaming responses from the API:

```javascript
const handleStreamingResponse = async (response) => {
    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    
    try {
        while (true) {
            const { done, value } = await reader.read();
            
            if (done) break;
            
            const chunk = decoder.decode(value);
            const lines = chunk.split('\n');
            
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    const data = JSON.parse(line.slice(6));
                    
                    if (data.event === 'token') {
                        response.value = data.data.full_text;
                    } else if (data.event === 'complete') {
                        console.log('Generation complete:', data.data);
                    } else if (data.event === 'error') {
                        throw new Error(data.data.error);
                    }
                }
            }
        }
    } finally {
        reader.releaseLock();
    }
};
```

## User Interface Design

### Modern UI Components
Create clean, modern interface components:

```css
/* Modern button styles */
.btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
    font-size: 16px;
    padding: 12px 24px;
    transition: all 0.3s ease;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}

/* Input field styles */
.input-field {
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 16px;
    padding: 12px 16px;
    transition: border-color 0.3s ease;
    width: 100%;
}

.input-field:focus {
    border-color: #667eea;
    outline: none;
}
```

### Responsive Design
Ensure mobile-friendly interface:

```css
/* Responsive design */
.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    .btn {
        width: 100%;
        margin-bottom: 10px;
    }
}
```

## State Management

### Reactive State
Use Vue.js reactive state for UI updates:

```javascript
const state = reactive({
    // Input state
    prompt: '',
    maxTokens: 256,
    temperature: 0.7,
    topP: 0.9,
    topK: 40,
    
    // Output state
    response: '',
    isStreaming: false,
    tokenCount: 0,
    generationTime: 0,
    
    // UI state
    error: null,
    showSettings: false,
    history: []
});
```

### State Validation
Validate user input before API calls:

```javascript
const validateInput = () => {
    if (!state.prompt.trim()) {
        state.error = 'Please enter a prompt';
        return false;
    }
    
    if (state.maxTokens < 1 || state.maxTokens > 2048) {
        state.error = 'Max tokens must be between 1 and 2048';
        return false;
    }
    
    if (state.temperature < 0 || state.temperature > 2) {
        state.error = 'Temperature must be between 0 and 2';
        return false;
    }
    
    return true;
};
```

## Error Handling

### User-Friendly Error Messages
Display clear error messages to users:

```javascript
const handleError = (error) => {
    console.error('API Error:', error);
    
    if (error.message.includes('503')) {
        state.error = 'Service temporarily unavailable. Please try again.';
    } else if (error.message.includes('500')) {
        state.error = 'Server error occurred. Please check your input.';
    } else if (error.message.includes('Network')) {
        state.error = 'Network error. Please check your connection.';
    } else {
        state.error = 'An unexpected error occurred. Please try again.';
    }
};
```

### Loading States
Provide visual feedback during operations:

```javascript
const showLoadingState = () => {
    state.isStreaming = true;
    state.error = null;
    state.response = '';
};

const hideLoadingState = () => {
    state.isStreaming = false;
};
```

## Performance Optimization

### Debounced Input
Prevent excessive API calls:

```javascript
import { debounce } from 'lodash';

const debouncedGenerate = debounce(generateText, 500);
```

### Response Caching
Cache responses for better performance:

```javascript
const responseCache = new Map();

const getCachedResponse = (prompt, params) => {
    const key = JSON.stringify({ prompt, ...params });
    return responseCache.get(key);
};

const setCachedResponse = (prompt, params, response) => {
    const key = JSON.stringify({ prompt, ...params });
    responseCache.set(key, response);
};
```

## Accessibility

### ARIA Labels
Include accessibility attributes:

```html
<input 
    v-model="prompt" 
    placeholder="Enter your prompt here..."
    aria-label="Text prompt input"
    aria-describedby="prompt-help"
    :disabled="isStreaming"
>

<div id="prompt-help" class="help-text">
    Enter a prompt to generate text using the LLM model.
</div>
```

### Keyboard Navigation
Support keyboard interactions:

```javascript
const handleKeyPress = (event) => {
    if (event.key === 'Enter' && event.ctrlKey) {
        generateText();
    }
};
```

## Testing

### Frontend Testing
Test Vue.js components and API integration:

```javascript
// Mock fetch for testing
const mockFetch = (response) => {
    global.fetch = jest.fn(() =>
        Promise.resolve({
            ok: true,
            json: () => Promise.resolve(response),
            body: {
                getReader: () => ({
                    read: () => Promise.resolve({ done: true, value: null }),
                    releaseLock: () => {}
                })
            }
        })
    );
};

// Test component behavior
test('generates text on button click', async () => {
    mockFetch({ text: 'Generated response' });
    
    const wrapper = mount(MyComponent);
    await wrapper.find('button').trigger('click');
    
    expect(wrapper.find('.response').text()).toBe('Generated response');
});
```

## Deployment

### Static File Serving
Serve frontend files with the API:

```python
from fastapi.staticfiles import StaticFiles

# Serve frontend files
app.mount("/frontend", StaticFiles(directory="frontend"), name="frontend")
```

### Production Optimization
Optimize for production deployment:

```html
<!-- Use CDN for production -->
<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>

<!-- Minify CSS and JavaScript -->
<style>
/* Minified styles */
</style>
```