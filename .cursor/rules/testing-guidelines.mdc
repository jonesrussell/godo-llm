---
globs: test_*.py,*_test.py
description: Testing guidelines and patterns for the LLM inference pipeline
---

# Testing Guidelines

## Test Structure

The main test suite is in [test_api.py](mdc:test_api.py) with comprehensive coverage:

### Test Categories

1. **Health Checks**: Service availability and status
2. **Model Tests**: LLM loading and basic inference
3. **API Tests**: Endpoint functionality and validation
4. **Streaming Tests**: Server-Sent Events implementation
5. **Caching Tests**: Redis integration and performance
6. **Error Handling**: Graceful failure scenarios

### Async Testing Patterns

```python
import pytest
import httpx

@pytest.mark.asyncio
async def test_streaming_generation():
    async with httpx.AsyncClient() as client:
        async with client.stream("POST", "/generate", json=request_data) as response:
            async for line in response.aiter_lines():
                if line.startswith("data: "):
                    data = json.loads(line[6:])
                    assert "token" in data
```

### Mocking External Dependencies

- Mock Redis operations for unit tests
- Mock model loading for faster test execution
- Use fixtures for common test data
- Isolate tests from external services

### Integration Testing

- Test full API flow from request to response
- Verify streaming functionality end-to-end
- Test caching behavior with real Redis
- Validate error handling and recovery

### Performance Testing

- Measure token generation rate
- Test memory usage under load
- Verify cache hit rates
- Monitor response latency

## Test Automation

Use Task commands for testing:

```bash
task test           # Run all tests
task test:health    # Health check tests only
task test:model     # Model-specific tests
task test:generate  # Generation tests
```

## Test Data Management

- Use realistic prompts for testing
- Include edge cases (empty prompts, very long prompts)
- Test different parameter combinations
- Validate response formats and schemas

## Continuous Integration

- Automated testing on code changes
- GPU availability testing
- Docker container testing
- Performance regression detection