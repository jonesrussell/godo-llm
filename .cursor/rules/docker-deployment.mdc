---
globs: docker/*,*.yml,*.yaml,Dockerfile*
description: Docker deployment and containerization guidelines
---

# Docker Deployment Guidelines

## Multi-Service Architecture

The project uses Docker Compose for multi-service deployment:

- **API Service**: FastAPI application with LLM inference
- **Redis Service**: Caching layer for performance optimization
- **Frontend Service**: Vue.js web interface (optional)

## Configuration Files

- [docker-compose.yml](mdc:docker/docker-compose.yml) - Main service orchestration
- [docker-compose.dev.yml](mdc:docker/docker-compose.dev.yml) - Development overrides
- [docker-compose.prod.yml](mdc:docker/docker-compose.prod.yml) - Production overrides
- [Dockerfile](mdc:docker/Dockerfile) - Container image definition

## Container Configuration

### Base Image Strategy

- Use Python 3.13 slim image for smaller size
- Install CUDA dependencies for GPU support
- Include build tools for llama-cpp-python compilation
- Multi-stage build for optimization

### Volume Management

- Mount model files as volumes for persistence
- Use named volumes for Redis data
- Bind mount source code in development
- Separate volumes for logs and cache

### Environment Variables

- Use `.env` files for configuration
- Separate dev/prod environment files
- Include GPU-specific CUDA settings
- Redis connection configuration

### Networking

- Use Docker networks for service communication
- Expose API port (8000) for external access
- Internal Redis communication on private network
- Frontend proxy configuration

## Development vs Production

### Development Mode

- Hot reloading for code changes
- Debug logging enabled
- Development dependencies included
- Volume mounts for live code editing

### Production Mode

- Optimized image size
- Security hardening
- Production logging configuration
- Health checks and monitoring

## GPU Support

- NVIDIA Container Runtime required
- CUDA environment variables
- GPU memory management
- Fallback to CPU if GPU unavailable

## Deployment Commands

Use Task automation for Docker operations:

```bash
task docker:up      # Start all services
task docker:down    # Stop all services
task docker:build   # Build images
task docker:logs    # View logs
```

## Monitoring & Health Checks

- Container health checks
- Service dependency management
- Log aggregation
- Resource usage monitoring